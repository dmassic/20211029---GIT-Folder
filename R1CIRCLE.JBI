/JOB
//NAME R1CIRCLE
//POS
///NPOS 0,0,0,0,0,0
//INST
///DATE 2018/07/11 10:29
///COMM Diameter/Center Calcs
///ATTR SC,RW,MC
///GROUP1 RB1
///LVARS 15,15,20,21,0,11,0,0
NOP
'----------------------------
'----- DX200 ----------------
'--- ver.2.1.0 --------------
'--- Yaskawa America Inc. ---
'--- Motoman Robotic Div. ---
'--- 2016Dec16; TL ----------
'----------------------------
' 
'- For use with Touch Sensing
'-  and/or 1D laser sensor
' 
'--------------------------------
'---- Setup Section ... begin ---
'--------------------------------
MSG ""
' 
' Retry on/off
SET LB012 0
' 
' Flag status/alarm
' 0=Alarm 1=NoAlarm w/status flag
SET LB013 0
' 
' global Bvar address for status
SET LB014 99
SET B[LB014] 0
' 
*RETRY
' 
'LI8 = Robot Number (ie. R1)
SET LI008 1
' 
'If using a laser sensor instead
' of touch sense, LI13 = rapid
' input # for laser sensor. Set
' LI13 to 0 if touch sensing is
' used.
SET LI013 0
' 
' output laser is wired to
SET LI014 21
' 
'LI6 = auto teach offset
SET LI006 10
SET LD000 LI006
' 
'LI0 = non search speed
SET LI000 3000
' 
'LR4=AllowShiftAmnt as a
' % of Taught circle dia.
SET LR004 10
IFTHENEXP LR004<1 OREXP LR004>20
	 MSG "Check Allowable Percent Offset"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
	 PAUSE
ENDIF
DIV LR004 100
' 
' Dvar Output for Diameter
' Measurement
SET LB003 99
' 
'--------------------------------
'-- Setup Section ... complete --
'--------------------------------
'--- Do not modify below here ---
'--------------------------------
'--------------------------------
' Initialize Variables
'--------------------------------
' 
' Rapid Input number
GETARG LI004 IARG#(16)
' 
' check variable settings
' 
IFTHEN LB003<0 ORIF LB003>99
	 MSG "Set Dvariable between 0 - 99"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
IFTHEN LI000<1 ORIF LI000>3000
	 MSG "Set Air Speed to 1-3000cm/min"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
IFTHEN LI004<1 ORIF LI004>6
	 MSG "Set RapidInput# between 1 - 6"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
IFTHEN LI006<1 ORIF LI006>100
	 MSG "Set AutoTeach to 1 - 100mm"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
IFTHEN LI008<1 ORIF LI008>4
	 MSG "Set Robot# between 1 - 4"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
IFTHEN LI013<0 ORIF LI013>6
	 MSG "Set Laser# between 1 - 6"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
' 
' set I/O for Robots
' 
IFTHEN LI008=1 ANDIF LI004=1
	 SET LI007 1841
ELSEIF LI008=1 ANDIF LI004=2
	 SET LI007 1842
ELSEIF LI008=1 ANDIF LI004=3
	 SET LI007 1843
ELSEIF LI008=1 ANDIF LI004=4
	 SET LI007 1844
ELSEIF LI008=1 ANDIF LI004=5
	 SET LI007 1845
ELSEIF LI008=1 ANDIF LI004=6
	 SET LI007 1846
ELSEIF LI008=2 ANDIF LI004=1
	 SET LI007 1833
ELSEIF LI008=2 ANDIF LI004=2
	 SET LI007 1834
ELSEIF LI008=2 ANDIF LI004=3
	 SET LI007 1835
ELSEIF LI008=2 ANDIF LI004=4
	 SET LI007 1836
ELSEIF LI008=2 ANDIF LI004=5
	 SET LI007 1837
ELSEIF LI008=2 ANDIF LI004=6
	 SET LI007 1838
ELSEIF LI008=3 ANDIF LI004=1
	 SET LI007 1825
ELSEIF LI008=3 ANDIF LI004=2
	 SET LI007 1826
ELSEIF LI008=3 ANDIF LI004=3
	 SET LI007 1827
ELSEIF LI008=3 ANDIF LI004=4
	 SET LI007 1828
ELSEIF LI008=3 ANDIF LI004=5
	 SET LI007 1829
ELSEIF LI008=3 ANDIF LI004=6
	 SET LI007 1830
ELSEIF LI008=4 ANDIF LI004=1
	 SET LI007 1817
ELSEIF LI008=4 ANDIF LI004=2
	 SET LI007 1818
ELSEIF LI008=4 ANDIF LI004=3
	 SET LI007 1819
ELSEIF LI008=4 ANDIF LI004=4
	 SET LI007 1820
ELSEIF LI008=4 ANDIF LI004=5
	 SET LI007 1821
ELSEIF LI008=4 ANDIF LI004=6
	 SET LI007 1822
ENDIF
' 
JUMP *NO_LASER IF LI004<>LI013
DOUT OT#(LI014) ON
*NO_LASER
' 
DOUT OT#(LI007) ON
'signal delay time
TIMER T=0.10
' 
'--------------------------------
' Initialize complete
'--------------------------------
' 
' teach mode?
GETARG LB004 IARG#(1)
IFTHENEXP LB004<0 OREXP LB004>3
	 MSG "Set TeachMode to 0, 1,2 or 3"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
' 
'RefPoint1
GETARG LP001 IARG#(2)
CNVRT LPX001 LPX001 BF
' 
'RefPoint2
GETARG LP002 IARG#(4)
CNVRT LPX002 LPX002 BF
' 
'RefPoint3
GETARG LP003 IARG#(6)
CNVRT LPX003 LPX003 BF
' 
'LB11 = speed type
GETPRM LD001 KIND=5 PRMNO=221
SET LB011  EXPRESS LD001 + 1
' search speed
GETARG LI001 IARG#(8)
IFTHENEXP LI001>1 ANDEXP LI001<1000
	 IFTHENEXP LB011=1
		' mm/sec
		 MUL LI000 10
		 MUL LI001 10
	 ELSEIFEXP LB011=2
		' cm/min
		 SET LI000  EXPRESS LI000 / 0.6
		 SET LI001  EXPRESS LI001 / 0.6
	 ELSEIFEXP LB011=3
		' inch/min
		 SET LI000  EXPRESS LI000 / 0.6 / 0.392
		 SET LI001  EXPRESS LI001 / 0.6 / 0.392
	 ELSEIFEXP LB011=4
		' mm/min
		 SET LI000  EXPRESS LI000 / 6
		 SET LI001  EXPRESS LI001 / 6
	 ELSE
		 MSG "Set Speed Type between 1 - 4"
		 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
	 ENDIF
ELSE
	 MSG "Set SearchSpeed to 1-1000cm/min"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
	 PAUSE
ENDIF
' 
' Search Offset
GETARG LR002 IARG#(9)
IFTHENEXP LR002>1 ANDEXP LR002<=100
	 SET LD002 LR002
ELSE
	 MSG "Set Srch Offset between 1-100mm"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
' 
' Teach Ref Point Offset %
GETARG LR003 IARG#(10)
IFTHENEXP LR002>=0 ANDEXP LR002<=100
	 SET LB005 LR003
	 DIV LR003 100
ELSE
	 MSG "Set Teach Offset between 0-100%"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
' 
' max search dist
GETARG LD001 IARG#(11)
IFTHENEXP LD001>=1 ANDEXP LD001<=100
	 MUL LD001 10
	 SET LD014  EXPRESS LD001 * 100
ELSE
	 MSG "Set SearchDistance to 1 - 100mm"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
' 
' Ouput Shift Pvar no.
GETARG LI002 IARG#(12)
IFTHENEXP LI002<0 OREXP LI002>127
	 MSG "Set ShiftVariable between 0-127"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
' 
' pattern type
' Outside Circle=0
' Inside circle=1
' Inside Cross Hairs=2
' Outside Cross Hairs=3
GETARG LI003 IARG#(13)
IFTHENEXP LI003<0 OREXP LI003>3
	 MSG "Set Type between 0 - 3"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
' 
' circle diameter
GETARG LR000 IARG#(14)
IFTHENEXP LR000>=1 ANDEXP LR000<=1000
	 SET LR001 0.25
	 SET LD004  EXPRESS LR000 * LR001
	 SET LD015  EXPRESS LR000 / 2 * LR003
	 SET LD016  EXPRESS LR000 * 500
ELSE
	 MSG "Set Diameter between 1 - 1000mm"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
' 
' UserFrame #
GETARG LI005 IARG#(15)
IFTHENEXP LI005>=1 ANDEXP LI005<=63
	 SET LB008 LI005
ELSE
	 MSG "Set UserFrame# between 0 - 63"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
'**********************
' 
JUMP *XIN IF LI003=2
JUMP *XOUT IF LI003=3
' 
JUMP *AUTO IF LB005=0
SET LD004 LD015
*AUTO
' 
'Calc. center of circle
' of RefPositions
SET LB000 4
SET LP004 LP001
SET LP005 LP002
SET LP006 LP003
JUMP *crclcntr
*4
SET LP007 LP004
'Save centerPosition
SET LP009 LP004
' 
'<Define Offset vector
SUB LP007 LP001
SET LB000 5
SET LP004 LP007
JUMP *UNITVECT
*5
SET LP007 LP004
SET LD000 LD010
'LD0 is radius of masterPart
' 
JUMP *TCHMODE IF LB004<>0
SET LR005 LD016
SET LR006 LD000
SET LR019 LR006
SET LR020  EXPRESS LR004 * LR006
ADD LR019 LR020
JUMP *DIA_NG IF LR005>=LR019
SET LR019 LR006
SUB LR019 LR020
JUMP *DIA_NG IF LR005<=LR019
*TCHMODE
' 
MUL LP007 LD002
JUMP *inside IF LI003=1
MUL LP007 -1
*inside
SET LP008 LP007
'LP7 is offsetVector>
' 
'Detect point 1
ADD LP007 LP001
SET LP000 LP007
MOVL LP007 V=LI000
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
MOVL LP001 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX001 $PX002
CNVRT LPX001 LPX001 BF
JUMP *Teach1 IF LB004=1
MOVL LP007 V=LI000
' 
'Detect point 2
SET LP007 LP008
ADD LP007 LP002
'Calc RefPointOffset for Teaching
JUMP *rP2-ok IF LB004<>2
SUB LP002 LP001
SET LB000 6
SET LP004 LP002
JUMP *UNITVECT
*6
SET LP002 LP004
MUL LP002 LD004
ADD LP002 LP001
SET LP007 LP002
ADD LP007 LP008
*rP2-ok
MOVL LP007 V=LI000
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
MOVL LP002 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX002 $PX002
CNVRT LPX002 LPX002 BF
JUMP *Teach2 IF LB004=2
MOVL LP007 V=LI000
' 
'Detect point 3
SET LP007 LP008
ADD LP007 LP003
'Calc RefPointOffset for Teaching
JUMP *rP3-ok IF LB004<>3
SUB LP003 LP001
SET LB000 7
SET LP004 LP003
JUMP *UNITVECT
*7
SET LP003 LP004
MUL LP003 LD004
ADD LP003 LP001
SET LP007 LP003
ADD LP007 LP008
*rP3-ok
MOVL LP007 V=LI000
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
MOVL LP003 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX003 $PX002
CNVRT LPX003 LPX003 BF
JUMP *Teach3 IF LB004=3
MOVL LP000 V=LI000
' 
'Calc new center of circle
SET LB000 8
SET LP004 LP001
SET LP005 LP002
SET LP006 LP003
JUMP *crclcntr
*8
'Calc Max allowable shift
' from diameter of OrigCircle
SET LP007 LP004
' 
'<Define Offset vector
SUB LP007 LP001
SET LB000 9
SET LP004 LP007
JUMP *UNITVECT
*9
SET D[LB003]  EXPRESS LD010 * 2
SET LR005 LD010
SET LR006 LD000
SET LR019 LR006
SET LR020  EXPRESS LR004 * LR006
ADD LR019 LR020
JUMP *DIA_NG IF LR005>=LR019
SET LR019 LR006
SUB LR019 LR020
JUMP *DIA_NG IF LR005<=LR019
'Calc new center of circle
SET LB000 10
SET LP004 LP001
SET LP005 LP002
SET LP006 LP003
JUMP *crclcntr
*10
SET LP007 LP004
'<Calc center of circle sftAmnt
SUB LP009 LP007
'LP09 is CrclCntr sftAmnt>
' 
'Verify shift amount < max amount
SET LB000 11
SET LP004 LP009
JUMP *UNITVECT
*11
'################################
IFTHENEXP LB012=1 ANDEXP LD010>=LD014
	 SET LB012 0
	 JUMP *RETRY
ENDIF
' 
MUL LP009 -1
SETE LP009 (4) 0
SETE LP009 (5) 0
SETE LP009 (6) 0
'Save shift amount to Pvar
SET P[LI002] LP009
' 
JUMP *MAXSHIFT IF LD010>=LD014
' 
DOUT OT#(LI007) OFF
RET IF LI004<>LI013
DOUT OT#(LI014) OFF
' 
RET
' 
'**********************
*Teach1
MSG "Modify RobotPos1,set TeachMode=2"
TIMER T=8.00
PAUSE
RET
*Teach2
MSG "Modify RobotPos2,set TeachMode=3"
TIMER T=8.00
PAUSE
RET
*Teach3
MSG "Modify RobotPos3,set TeachMode=0"
TIMER T=8.00
PAUSE
RET
' 
'********************************
'INSIDE CROSSHAIR SEARCH START
'********************************
*XIN
' set offset for Xin,Xout
SET LD004 3000
' 
' store original position in LP9
SET LP009 LP001
IFTHENEXP LB008<>0
	 MFRAME UF#(LB008) LPX001 LPX002 LPX003
	 CNVRT LPX001 LPX001 UF#(LB008)
	 GETE LD000 LP001 (3)
ENDIF
' 
SET LP000 LP001
SET LP002 LP001
SET LP003 LP001
MUL LD002 1000
' 
GETE LD017 LP002 (1)
ADD LD017 LD016
SETE LP002 (1) LD017
IFTHENEXP LD016<LD002
	 SET LD018  EXPRESS LD017 - LD016
ELSE
	 SET LD018  EXPRESS LD017 - LD002
ENDIF
SETE LP001 (1) LD018
' 
MOVL LP000 V=LI000
' 
MOVL LP001 V=LI000
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
MOVL LP002 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX002 $PX007
CNVRT LPX002 LPX002 UF#(LB008)
' 
SET LP003 LP002
SET LD019  EXPRESS LD016 * -2
GETE LD017 LP003 (1)
ADD LD017 LD019
SETE LP003 (1) LD017
IFTHENEXP LD016<LD002
	 SET LD018  EXPRESS LD017 + LD016
ELSE
	 SET LD018  EXPRESS LD017 + LD002
ENDIF
SETE LP001 (1) LD018
' 
MOVL LP001 V=LI000
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
MOVL LP003 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX003 $PX007
CNVRT LPX003 LPX003 UF#(LB008)
' 
SUB LP002 LP003
SET LB000 12
SET LP004 LP002
JUMP *UNITVECT
*12
DIV LD010 2
GETE LD017 LP003 (1)
ADD LD017 LD010
SETE LP000 (1) LD017
' 
' 
SET LP001 LP000
SET LP002 LP000
SET LP003 LP000
' 
GETE LD017 LP002 (2)
ADD LD017 LD016
SETE LP002 (2) LD017
IFTHENEXP LD016<LD002
	 SET LD018  EXPRESS LD017 - LD016
ELSE
	 SET LD018  EXPRESS LD017 - LD002
ENDIF
SETE LP001 (2) LD018
' 
' 
MOVL LP001 V=LI000
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
MOVL LP002 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX002 $PX007
CNVRT LPX002 LPX002 UF#(LB008)
' 
SET LP003 LP002
SET LD019  EXPRESS LD016 * -2
GETE LD017 LP003 (2)
ADD LD017 LD019
SETE LP003 (2) LD017
IFTHENEXP LD016<LD002
	 SET LD018  EXPRESS LD017 + LD016
ELSE
	 SET LD018  EXPRESS LD017 + LD002
ENDIF
SETE LP001 (2) LD018
' 
MOVL LP001 V=LI000
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
MOVL LP003 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX003 $PX002
CNVRT LPX003 LPX003 UF#(LB008)
GETS LPX010 $PX007
CNVRT LPX010 LPX010 UF#(LB008)
' 
SUB LP003 LP010
SUB LP002 LP010
SET LB000 13
SET LP004 LP002
JUMP *UNITVECT
*13
DIV LD010 2
GETE LD017 LP010 (2)
ADD LD017 LD010
SETE LP010 (2) LD017
SET LP000 LP010
' 
MOVL LP000 V=LI000
ADD LP000 LP003
' 
JUMP *Teach4 IF LB004=1
' 
CNVRT LPX000 LPX000 BF
SUB LP000 LP009
SETE LP000 (4) 0
SETE LP000 (5) 0
SETE LP000 (6) 0
'Save shift amount to Pvar
' 
SET P[LI002] LP000
'Verify shift amount < max amount
SET LB000 14
SET LP004 LP000
JUMP *UNITVECT
*14
'################################
IFTHENEXP LB012=1 ANDEXP LD010>=LD014
	 SET LB012 0
	 JUMP *RETRY
ENDIF
' 
JUMP *MAXSHIFT IF LD010>=LD014
' 
DOUT OT#(LI007) OFF
RET IF LI004<>LI013
DOUT OT#(LI014) OFF
' 
RET
' 
'**********************
*Teach4
MSG "Modify RobotPos1,set TeachMode=0"
TIMER T=8.00
PAUSE
RET
PAUSE
' 
'********************************
' INSIDE CROSSHAIR SEARCH END
'********************************
' 
'********************************
' OUTSIDE CROSSHAIR SEARCH START
'********************************
*XOUT
' 
' set offset for Xin,Xout
SET LD004 3000
' 
' store original position in LP9
SET LP009 LP001
' 
' 
IFTHENEXP LB008<>0
	 MFRAME UF#(LB008) LPX001 LPX002 LPX003
	 CNVRT LPX001 LPX001 UF#(LB008)
	 GETE LD000 LP001 (3)
ENDIF
' 
SUB LD000 LD004
SETE LP001 (3) LD000
SET LP002 LP001
SET LP003 LP001
SET LP000 LP001
SETE LP000 (3) 25000
' 
MUL LD002 1000
' 
GETE LD017 LP002 (1)
ADD LD017 LD016
SETE LP002 (1) LD017
SET LD018  EXPRESS LD017 + LD002
SETE LP001 (1) LD018
SETE LP000 (1) LD018
' 
MOVL LP000 V=LI000
' 
MOVL LP001 V=LI000
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
MOVL LP002 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX002 $PX007
CNVRT LPX002 LPX002 UF#(LB008)
' 
MOVL LP001 V=LI000
SET LP003 LP002
SET LD019  EXPRESS LD016 * -2
GETE LD017 LP003 (1)
ADD LD017 LD019
SETE LP003 (1) LD017
SET LD018  EXPRESS LD017 - LD002
SETE LP001 (1) LD018
' 
MOVL LP000 V=LI000
' 
SETE LP000 (1) LD018
MOVL LP000 V=LI000
' 
MOVL LP001 V=LI000
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
MOVL LP003 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX003 $PX007
CNVRT LPX003 LPX003 UF#(LB008)
' 
MOVL LP001 V=LI000
MOVL LP000 V=LI000
' 
SUB LP002 LP003
SET LB000 15
SET LP004 LP002
JUMP *UNITVECT
*15
DIV LD010 2
GETE LD017 LP003 (1)
ADD LD017 LD010
SETE LP000 (1) LD017
' 
SET LP001 LP000
SETE LP001 (3) LD000
SET LP002 LP001
SET LP003 LP001
' 
GETE LD017 LP002 (2)
ADD LD017 LD016
SETE LP002 (2) LD017
SET LD018  EXPRESS LD017 + LD002
SETE LP001 (2) LD018
' 
SETE LP000 (2) LD018
MOVL LP000 V=LI000
' 
MOVL LP001 V=LI000
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
MOVL LP002 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX002 $PX007
CNVRT LPX002 LPX002 UF#(LB008)
' 
MOVL LP001 V=LI000
MOVL LP000 V=LI000
' 
SET LP003 LP002
SET LD019  EXPRESS LD016 * -2
GETE LD017 LP003 (2)
ADD LD017 LD019
SETE LP003 (2) LD017
SET LD018  EXPRESS LD017 - LD002
SETE LP001 (2) LD018
' 
SETE LP000 (2) LD018
MOVL LP000 V=LI000
' 
MOVL LP001 V=LI000
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
MOVL LP003 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX003 $PX002
CNVRT LPX003 LPX003 UF#(LB008)
GETS LPX010 $PX007
CNVRT LPX010 LPX010 UF#(LB008)
' 
SUB LP003 LP010
' 
SUB LP002 LP010
SET LB000 16
SET LP004 LP002
JUMP *UNITVECT
*16
DIV LD010 2
GETE LD017 LP010 (2)
ADD LD017 LD010
SETE LP010 (2) LD017
' 
MOVL LP001 V=LI000
MOVL LP000 V=LI000
' 
SET LP000 LP010
GETE LD000 LP000 (3)
ADD LD000 LD004
SETE LP000 (3) LD000
' 
MOVL LP000 V=LI000
ADD LP000 LP003
' 
JUMP *Teach5 IF LB004=1
' 
CNVRT LPX000 LPX000 BF
SUB LP000 LP009
SETE LP000 (4) 0
SETE LP000 (5) 0
SETE LP000 (6) 0
'Save shift amount to Pvar
SET P[LI002] LP000
' 
'Verify shift amount < max amount
SET LB000 17
SET LP004 LP000
JUMP *UNITVECT
*17
'################################
IFTHENEXP LB012=1 ANDEXP LD010>=LD014
	 SET LB012 0
	 JUMP *RETRY
ENDIF
' 
JUMP *MAXSHIFT IF LD010>=LD014
' 
DOUT OT#(LI007) OFF
RET IF LI004<>LI013
DOUT OT#(LI014) OFF
' 
RET
' 
'**********************
*Teach5
MSG "Modify RobotPos1,set TeachMode=0"
TIMER T=8.00
PAUSE
RET
PAUSE
' 
'********************************
' OUTSIDE CROSSHAIR SEARCH END
'********************************
' 
'P4 is original vector i
'P5 is original vector j
'LD 5,6,7,8,9,10,11,12,13
'LP 4,5
'LR 5,6,7,8,9,10,11,12,13,14
*CROSPROD
GETE LD005 LP004 (1)
GETE LD006 LP004 (2)
GETE LD007 LP004 (3)
SET LR005 LD005
SET LR006 LD006
SET LR007 LD007
'd8 d9 d10 are j vector
GETE LD008 LP005 (1)
GETE LD009 LP005 (2)
GETE LD010 LP005 (3)
SET LR008 LD008
SET LR009 LD009
SET LR010 LD010
'X component LR11
SET LR013 LR006
SET LR014 LR007
MUL LR013 LR010
MUL LR014 LR009
SUB LR013 LR014
SET LR011 LR013
'Y component LR12
SET LR015 LR005
SET LR014 LR007
MUL LR015 LR010
MUL LR014 LR008
SUB LR014 LR015
SET LR012 LR014
'Z component LR13
MUL LR005 LR009
MUL LR006 LR008
SUB LR005 LR006
SET LD011 LR011
SET LD012 LR012
SET LD013 LR005
DIV LD011 1000
DIV LD012 1000
DIV LD013 1000
SETE LP004 (1) LD011
SETE LP004 (2) LD012
SETE LP004 (3) LD013
'LP4 is cross product vect k
JUMP LABEL: LB000
' 
'LP4 is original vector
'Calculates LD10 as Vector length
'- ver. 2.0: microns not mm
'LD 5,6,7,10
'LP 4
'LR 5,6,7,8,9
*UNITVECT
GETE LD005 LP004 (1)
GETE LD006 LP004 (2)
GETE LD007 LP004 (3)
SET LR005 LD005
SET LR006 LD006
SET LR007 LD007
SET LR008 LR005
SET LR009 LR006
MUL LR008 LR008
MUL LR009 LR009
ADD LR008 LR009
SQRT LR008 LR008
SET LR009 LR007
MUL LR008 LR008
MUL LR009 LR009
ADD LR008 LR009
SQRT LR008 LR008
'R8=vector length
SET LD010 LR008
JUMP *uvecZero IF LR008=0
DIV LR005 LR008
DIV LR006 LR008
DIV LR007 LR008
JUMP *uvecNot0
*uvecZero
SET LR005 0
SET LR006 0
SET LR007 0
*uvecNot0
MUL LR005 1000
MUL LR006 1000
MUL LR007 1000
SET LD005 LR005
SET LD006 LR006
SET LD007 LR007
SETE LP004 (1) LD005
SETE LP004 (2) LD006
SETE LP004 (3) LD007
SETE LP004 (4) 0
SETE LP004 (5) 0
SETE LP004 (6) 0
SETE LP004 (7) 0
JUMP LABEL: LB000
' 
*PROJECT
'LP4 is vector to project
'LP5 is vector to project on to
'LD 5,6,7,8,9,10
'LP 4,5
'LR 5,6,7,8,9,10,11
GETE LD005 LP004 (1)
GETE LD006 LP004 (2)
GETE LD007 LP004 (3)
GETE LD008 LP005 (1)
GETE LD009 LP005 (2)
GETE LD010 LP005 (3)
SET LR005 LD005
SET LR006 LD006
SET LR007 LD007
SET LR008 LD008
SET LR009 LD009
SET LR010 LD010
'Dot product
MUL LR005 LR008
MUL LR006 LR009
MUL LR007 LR010
SET LR011 LR005
ADD LR011 LR006
ADD LR011 LR007
SET LR005 LR008
SET LR006 LR009
SET LR007 LR010
MUL LR005 LR005
MUL LR006 LR006
MUL LR007 LR007
ADD LR005 LR006
ADD LR005 LR007
'LD5 is square of LP5
JUMP *projZero IF LR005=0
DIV LR011 LR005
JUMP *projNot0
*projZero
SET LR011 0
*projNot0
MUL LR008 LR011
MUL LR009 LR011
MUL LR010 LR011
SET LD008 LR008
SET LD009 LR009
SET LD010 LR010
SETE LP004 (1) LD008
SETE LP004 (2) LD009
SETE LP004 (3) LD010
'LP4 is projected vector
JUMP LABEL: LB000
' 
' 
*crclcntr
'XY plane
'in:LP4 point on circle
'in:LP5 point on circle
'in:LP6 point on circle
'out:LP4 is center point
'LD 5,6,7,8,9,10,11
'LP 4,5
'LR 5,6,7,8,9,10,11,12
'LR 13,14,15,16,17,18
' Capture X and Y elements
GETE LD005 LP004 (1)
SET LR015 LD005
GETE LD005 LP004 (2)
SET LR016 LD005
GETE LD005 LP005 (1)
SET LR017 LD005
GETE LD005 LP005 (2)
SET LR018 LD005
GETE LD005 LP006 (1)
SET LR005 LD005
GETE LD005 LP006 (2)
SET LR006 LD005
' Calculate Center of circle
SET LR014  EXPRESS LR015 * LR015 + LR016 * LR016 - LR017 * LR017 - LR018 * LR018
SET LR007  EXPRESS 2 * LR015 - 2 * LR017
SET LR008  EXPRESS 2 * LR016 - 2 * LR018
SET LR009  EXPRESS LR015 * LR015 + LR016 * LR016 - LR005 * LR005 - LR006 * LR006
SET LR010  EXPRESS 2 * LR015 - 2 * LR005
SET LR011  EXPRESS 2 * LR016 - 2 * LR006
' r13=Y coordinate (k)
SET LR013  EXPRESS ( LR014 * LR010 - LR007 * LR009 ) / ( LR008 * LR010 - LR011 * LR007 )
' r12=X coordinate (h)
SET LR012  EXPRESS ( LR009 - LR011 * LR013 ) / LR010
SET LD005 LR012
SETE LP004 (1) LD005
SET LD005 LR013
SETE LP004 (2) LD005
'LP3=center of circle, abs
JUMP LABEL: LB000
' 
*CHK_NG
DOUT OT#(LI007) OFF
SETUALM 8000 "R1 ALREADY TOUCHED WIRE" 0 SMODE=0
PAUSE
RET
' 
*ngPos
MSG "check register position"
SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
PAUSE
RET
' 
*BADSRCH
DOUT OT#(LI007) OFF
MSG "No Surface Detected"
JUMP *CHCKMODE IF IN#(2023)=ON
SETUALM 8002 "R1 SEARCH OUT OF RANGE" 0 SMODE=0
PAUSE
*CHCKMODE
RET
' 
*DIA_NG
DOUT OT#(LI007) OFF
SET D[LB003]  EXPRESS LD010 * 2
MSG "Check Dvar for Dia. measured"
SETUALM 8003 "R1 DIAMETER OUT OF RANGE" 0 SMODE=0
PAUSE
RET
' 
*MAXSHIFT
DOUT OT#(LI007) OFF
MSG "Maximum Shift Amount Exceeded"
SUB P[LI002] P[LI002]
JUMP *NOALARM IF LB013=1
SETUALM 8004 "R1 MAX SHIFT EXCEEDED" 0 SMODE=0
PAUSE
*NOALARM
SET B[LB014] LB013
RET
' 
'----------------------
'- Please contact Jack
'- Moore of the TAT
'- to report bugs.
'----------------------
END
