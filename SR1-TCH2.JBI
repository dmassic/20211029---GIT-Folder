/JOB
//NAME SR1-TCH2
//POS
///NPOS 0,0,0,0,0,0
//INST
///DATE 2018/07/11 10:29
///COMM Touch macro
///ATTR SC,RW,MC
///GROUP1 RB1
///GROUP2 ST2
///LVARS 19,15,20,19,0,15,0,15
NOP
'----------------------------
'----- DX -------------------
'--- ver.1.7.0.2 ------------
'--- Yaskawa America Inc. ---
'--- Motoman Robotic Div. ---
'--- 2014DEC18; TL ----------
'---ADD RETRY FUNCTION---
'---ADD PLANE FINDER ON OFF
'----------------------------
' 
'- For use with Touch Sensing
'-  and/or 1D laser sensor
' 
'--------------------------------
'---- Setup Section ... begin ---
'--------------------------------
' 
'RESET THE NUMBER OF RETRY BYTE
SET LB015 0
*RETRY
'LI8 = Robot Number (ie. R1)
SET LI008 1
' 
'If using a laser sensor instead
' of touch sense, LI13 = rapid
' input # for laser sensor. Set
' LI13 to 0 if touch sensing is
' used.
SET LI013 0
' 
' output laser is wired to
SET LI014 21
' 
'LI6 = auto teach offset
SET LI006 4
SET LD000 LI006
' 
'LB11 = speed type
SET LB011 2
' 1 = mm/sec
' 2 = cm/min
' 3 = inch/min
' 4 = mm/min
' 
'LI0 = non search speed
SET LI000 1000
' 
'LB7 = userframe number
SET LB007 0
'--------------------------------
'MAXIMUM PERMISIV SHIFTED RESULT
'ARG 10 SET LD015
'--------------------------------
GETARG LR018 IARG#(10)
SET LD015  EXPRESS LR018 * 1000
'-----------------------------
'SET THE NEGATIVE MAXIMUM VALUE
'-----------------------------
SET LD019  EXPRESS -LD015
' 
'--------------------------------
'-- Setup Section ... complete --
'--------------------------------
'--- Do not modify below here ---
'--------------------------------
' 
GETS LPX000 $PX000
SET LEX001 LEX000
SET LEX002 LEX000
SET LEX003 LEX000
' 
'--------------------------------
' Initialize Variables
'--------------------------------
' 
' Rapid Input number
GETARG LI004 IARG#(16)
'--------------------------------
' SPECIFY IF WE USE OR NOT
' THE PLANE FINDER FUNCTION
'     1=USE   0=NOT USE
'--------------------------------
GETARG LB013 IARG#(14)
'--------------------------------
'RETRY THE SEARCH IF
'THE SHIFT RESULT IS
'HIGHTIER THAN THE MAX
'SET VALUE
'--------------------------------
GETARG LB014 IARG#(15)
' 
' check variable settings
' 
JUMP *ngFrame IF LB007<0
JUMP *ngFrame IF LB007>64
JUMP *ngSpdtyp IF LB011<1
JUMP *ngSpdtyp IF LB011>4
JUMP *ngSpeed2 IF LI000<1
JUMP *ngSpeed2 IF LI000>3000
JUMP *ngRIN IF LI004<1
JUMP *ngRIN IF LI004>5
JUMP *ngAteach IF LI006<1
JUMP *ngAteach IF LI006>100
JUMP *ngRobot IF LI008<1
JUMP *ngRobot IF LI008>4
JUMP *ngLaser IF LI013<0
JUMP *ngLaser IF LI013>5
JUMP *ngSpeed2 IF LI000<1
JUMP *ngSpeed2 IF LI000>4500
JUMP *ngSpdtyp IF LB011<1
JUMP *ngSpdtyp IF LB011>4
IFTHEN LB013>=2
	 MSG "Set Plane Finder to 0 or 1"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
IFTHEN LB014>=6
	 MSG "Set retry number between 1-5"
	 SETUALM 8001 "R1 INVALID PARAMETERS" 0 SMODE=0
ENDIF
' 
' set I/O for Robots
' 
JUMP *R1 IF LI008=1
JUMP *R2 IF LI008=2
JUMP *R3 IF LI008=3
JUMP *R4 IF LI008=4
' 
*R1
SET LI009 1861
SET LI010 1862
SET LI011 1863
SET LI012 1864
JUMP *RIN1R1 IF LI004=1
JUMP *RIN2R1 IF LI004=2
JUMP *RIN3R1 IF LI004=3
JUMP *RIN4R1 IF LI004=4
JUMP *RIN5R1 IF LI004=5
*RIN1R1
SET LI007 1841
JUMP *RINSET1
*RIN2R1
SET LI007 1842
JUMP *RINSET1
*RIN3R1
SET LI007 1843
JUMP *RINSET1
*RIN4R1
SET LI007 1844
JUMP *RINSET1
*RIN5R1
SET LI007 1845
*RINSET1
JUMP *RBTSET
*R2
SET LI009 1857
SET LI010 1858
SET LI011 1859
SET LI012 1860
JUMP *RIN1R2 IF LI004=1
JUMP *RIN2R2 IF LI004=2
JUMP *RIN3R2 IF LI004=3
JUMP *RIN4R2 IF LI004=4
JUMP *RIN5R2 IF LI004=5
*RIN1R2
SET LI007 1833
JUMP *RINSET2
*RIN2R2
SET LI007 1834
JUMP *RINSET2
*RIN3R2
SET LI007 1835
JUMP *RINSET2
*RIN4R2
SET LI007 1836
JUMP *RINSET2
*RIN5R2
SET LI007 1837
*RINSET2
JUMP *RBTSET
*R3
SET LI009 1853
SET LI010 1854
SET LI011 1855
SET LI012 1856
JUMP *RIN1R3 IF LI004=1
JUMP *RIN2R3 IF LI004=2
JUMP *RIN3R3 IF LI004=3
JUMP *RIN4R3 IF LI004=4
JUMP *RIN5R3 IF LI004=5
*RIN1R3
SET LI007 1825
JUMP *RINSET3
*RIN2R3
SET LI007 1826
JUMP *RINSET3
*RIN3R3
SET LI007 1827
JUMP *RINSET3
*RIN4R3
SET LI007 1828
JUMP *RINSET3
*RIN5R3
SET LI007 1829
*RINSET3
JUMP *RBTSET
*R4
SET LI009 1849
SET LI010 1850
SET LI011 1851
SET LI012 1852
JUMP *RIN1R4 IF LI004=1
JUMP *RIN2R4 IF LI004=2
JUMP *RIN3R4 IF LI004=3
JUMP *RIN2R4 IF LI004=4
JUMP *RIN3R4 IF LI004=5
*RIN1R4
SET LI007 1817
JUMP *RINSET4
*RIN2R4
SET LI007 1818
JUMP *RINSET4
*RIN3R4
SET LI007 1819
JUMP *RINSET4
*RIN4R4
SET LI007 1820
JUMP *RINSET4
*RIN5R4
SET LI007 1821
*RINSET4
*RBTSET
' 
JUMP *NO_LASER IF LI004<>LI013
'********************************
'OPEN LASER DOOR
'********************************
DOUT OT#(21) ON
TIMER T=0.20
'********************************
DOUT OT#(LI014) ON
*NO_LASER
' 
DOUT OT#(LI007) ON
'signal delay time
TIMER T=0.10
' 
'--------------------------------
' Initialize complete
'--------------------------------
' 
MSG ""
' 
' teach mode?
GETARG LB004 IARG#(1)
' LB4=0 ... playback
' LB4=1 ... autodetect ref2
' LB4=2 ... autodetect ref3
JUMP *ngTeach IF LB004>3
' 
'RefPoint1
GETARG LP001 IARG#(2)
'start point ST
GETARG LEX001 IARG#(3)
CNVRT LPX001 LPX001 BF
SET LEX000 LEX001
GETE LD005 LP001 (1)
JUMP *P1_OK IF LD005<>0
GETE LD005 LP001 (2)
JUMP *P1_OK IF LD005<>0
GETE LD005 LP001 (3)
JUMP *P1_OK IF LD005<>0
JUMP *ngPos
*P1_OK
SET LP008 LP001
' 
'RefPoint2
GETARG LP002 IARG#(4)
' 1st detect ST
GETARG LEX002 IARG#(5)
CNVRT LPX002 LPX002 BF
GETE LD005 LP002 (1)
JUMP *P2_OK IF LD005<>0
GETE LD005 LP002 (2)
JUMP *P2_OK IF LD005<>0
GETE LD005 LP002 (3)
JUMP *P2_OK IF LD005<>0
JUMP *ngPos
*P2_OK
' 
'RefPoint3
GETARG LP003 IARG#(6)
' Lap detect ST
GETARG LEX003 IARG#(7)
CNVRT LPX003 LPX003 BF
GETE LD005 LP003 (1)
JUMP *P3_OK IF LD005<>0
GETE LD005 LP003 (2)
JUMP *P3_OK IF LD005<>0
GETE LD005 LP003 (3)
JUMP *P3_OK IF LD005<>0
JUMP *ngPos
*P3_OK
' 
' search speed
GETARG LI001 IARG#(8)
JUMP *ngSpeed IF LI001<1
JUMP *ngSpeed IF LI001>1000
JUMP *S1 IF LB011=1
JUMP *S2 IF LB011=2
JUMP *S3 IF LB011=3
JUMP *S4 IF LB011=4
' 
*S1
' mm/sec
MUL LI000 10
MUL LI001 10
JUMP *SSET
*S2
' cm/min
SET LI000  EXPRESS LI000 / 0.599
SET LI001  EXPRESS LI001 / 0.599
JUMP *SSET
*S3
' inch/min
SET LI000  EXPRESS LI000 / 0.599 / 0.392
SET LI001  EXPRESS LI001 / 0.599 / 0.392
JUMP *SSET
*S4
' mm/min
SET LI000  EXPRESS LI000 / 5.99
SET LI001  EXPRESS LI001 / 5.99
*SSET
' 
' lap offset
GETARG LR004 IARG#(9)
JUMP *ngLap IF LR004<0
JUMP *ngLap IF LR004>20
SET LD002  EXPRESS LR004 * 1000
' 
' max search dist
GETARG LD001 IARG#(11)
JUMP *ngDist IF LD001<0
JUMP *ngDist IF LD001>100
MUL LD001 10
' 
' Ouput Shift Pvar no.
GETARG LI002 IARG#(12)
JUMP *ngOutP IF LI002<0
JUMP *ngOutP IF LI002>127
' 
'1TCH or 2TCH
GETARG LI005 IARG#(13)
JUMP *ngType IF LI005>2
JUMP *ngType IF LI005<1
SET LB006  EXPRESS LB004 + LI005
' 
JUMP *1TCH IF LI005=1
*1TCH
' 
'BEGIN---------------------------
JUMP *NOTEACH IF LB004=0
JUMP *FIND_RP1 IF LB004=1
JUMP *FIND_RP1 IF LB004=3
JUMP *FIND_RP1 IF LB006=3
JUMP *FIND_RP2 IF LB004=2
' Auto Teach section
' 
'--------------------------------
'--------------------------------
'--- Begin
'--------------------------------
*FIND_RP1
' 
SMOVL LP001 V=LI000 PL=0  +MOVJ LEX001
' 
' Start point
' Copy of LP001
SET LP006 LP001
' 
' Detect point
' Two copies of LP002
SET LP007 LP002
SET LP011 LP007
' 
' Lap Detect Point
' Copy of LP003
JUMP *1TCHCHCK IF LI005=2
GETE LD005 LP003 (1)
ADD LD005 1000
SETE LP003 (1) LD005
*1TCHCHCK
' 
' Touch 1
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
SMOVL LP007 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001  +MOVJ LEX001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
JUMP *FINTOUCH IF LB006=2
GETS LPX008 $PX002
CNVRT LPX008 LPX008 BF
' ORG
SET LP012 LP008
SET LEX012 LEX008
JUMP *SKIP-PF IF LB013=0
SMOVL LP001 V=LI000 PL=0  +MOVJ LEX001
TIMER T=0.20
' 
' Calculating offset for touch 2
' Finding vector and unitizing
SUB LP003 LP002
SET LP004 LP003
SET LB000 1
JUMP *UNITVECT
*1
' Search offset set by LD000
MUL LP004 LD000
ADD LP006 LP004
ADD LP007 LP004
' 
' Touch 2
SMOVL LP006 V=LI000 PL=0  +MOVJ LEX001
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
SMOVL LP007 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001  +MOVJ LEX001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX009 $PX002
CNVRT LPX009 LPX009 BF
' XX
SET LP013 LP009
SET LEX013 LEX009
' 
' Calculating offset for touch 3
' Cross product of offset 1
'   vector and touch 1 vector
' 
' Copying contents
SET LP007 LP001
SET LP003 LP008
' Calculating touch 1 vector
'   and unitizing
SUB LP003 LP001
SET LP004 LP003
SET LB000 2
JUMP *UNITVECT
*2
' Calculating vector of offset
'     from touch 2
SUB LP006 LP001
SET LP005 LP006
' 
' Finding cross product of
'     offset 1 and touch 1
SET LB000 3
JUMP *CROSPROD
*3
' Unitizing cross product vector
SET LB000 4
JUMP *UNITVECT
*4
' Search offset
MUL LP004 LD000
SUB LP007 LP004
SUB LP011 LP004
' 
' Touch 3
SMOVL LP007 V=LI000 PL=0  +MOVJ LEX001
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
SMOVL LP011 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001  +MOVJ LEX001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX011 $PX002
CNVRT LPX011 LPX011 BF
' XY
SET LP014 LP011
SET LEX014 LEX011
' 
SMOVL LP001 V=LI000 PL=0  +MOVJ LEX001
' 
JUMP *NOFRAME IF LB007=0
' 
MFRAME UF#(LB007) LPX012 LPX013 LPX014
' 
*NOFRAME
JUMP *END IF LB004=3
' 
' Calculating vector from touch 1
'    to touch 2 and vector from
'       touch 1 to touch 3
SUB LP009 LP008
SUB LP011 LP008
SET LP004 LP009
SET LP005 LP011
SET LB000 5
JUMP *CROSPROD
*5
SET LB000 6
JUMP *UNITVECT
*6
' Touch 4
MUL LP004 100
SUB LP001 LP004
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
SMOVL LP001 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001  +MOVJ LEX001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX011 $PX002
CNVRT LPX011 LPX011 BF
' 
JUMP *2TCHFIND IF LI005=2
JUMP *1TCHFIND IF LB006=3
*SKIP-PF
*2TCHFIND
MSG "Modify RefPoint2,set to TEACH 2"
TIMER T=8.00
PAUSE
*1TCHFIND
MSG "Modify RefPoint2,set to TEACH 0"
TIMER T=8.00
PAUSE
' 
*FIND_RP2
MSG ""
' Copy start, ref 1, and ref 2
SET LP008 LP002
SET LP006 LP002
SET LP007 LP002
SET LP009 LP001
SET LP011 LP003
' Finding vectors between points
SUB LP011 LP008
SUB LP009 LP008
' Projecting ref 2 on to start
SET LP004 LP011
SET LP005 LP009
SET LB000 7
JUMP *PROJECT
*7
' Finding vector parallel to
'   the surface
SUB LP011 LP004
ADD LP006 LP011
SET LB000 8
JUMP *UNITVECT
*8
' Creating offset vector
MUL LP004 LD002
DIV LP004 1000
ADD LP007 LP004
ADD LP006 LP004
' 
SET LP003 LP004
' 
' Touch 1
SMOVL LP007 V=LI000 PL=0  +MOVJ LEX001
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
SMOVL LP006 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=75.0  +MOVJ LEX001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX008 $PX002
CNVRT LPX008 LPX008 BF
JUMP *SKIP-PF2 IF LB013=0
SMOVL LP007 V=LI000 PL=0  +MOVJ LEX001
' 
' Finding vector between points
SET LP011 LP006
SUB LP011 LP007
' Unitizing start vector
SET LP004 LP009
SET LB000 9
JUMP *UNITVECT
*9
' Cross product of start vector
'  and vector parallel to surface
SET LP005 LP011
SET LB000 10
JUMP *CROSPROD
*10
SET LB000 11
JUMP *UNITVECT
*11
' Adding search offset
SET LP009 LP007
MUL LP004 LD000
ADD LP009 LP004
ADD LP006 LP004
' 
' Touch 2
SMOVL LP009 V=LI000 PL=0  +MOVJ LEX001
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
SMOVL LP006 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=75.0  +MOVJ LEX001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX009 $PX002
CNVRT LPX009 LPX009 BF
SMOVL LP007 V=LI000 PL=0  +MOVJ LEX001
' 
' Find perp. search direction
' Copying contents
SET LP011 LP007
' 
' Finding vector between touches
SUB LP009 LP008
SET LP005 LP009
' Finding ref 2 vector
SUB LP011 LP008
SET LP004 LP011
SET LB000 12
' Projecting ref 2 vector on to
'    touch vector
JUMP *PROJECT
*12
' Creating point perp. to ref 1
ADD LP008 LP004
' 
' Touch 3
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
SMOVL LP008 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001  +MOVJ LEX001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX011 $PX002
' 
*SKIP-PF2
MSG "Modify RefPoint3,set to TEACH 0"
TIMER T=8.00
PAUSE
RET
' 
'********************************
'********************************
*NOTEACH
MSG ""
SMOVL LP001 V=LI000 PL=0  +MOVJ LEX001
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
SMOVL LP002 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001  +MOVJ LEX001
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX009 $PX002
JUMP *ADD IF LI005=1
GETS LPX009 $PX007
*ADD
CNVRT LPX009 LPX009 BF
' Calculate shift amount
SET LP010 LP009
SET LP008 LP009
SUB LP009 LP002
' LP10 is shift from 1st touch
JUMP *FINTOUCH IF LI005=1
' 
'calculate lap offset vector
SET LB000 13
SET LP004 LP001
SUB LP004 LP002
SET LP006 LP004
JUMP *UNITVECT
*13
' Adding search offset
MUL LP004 LD002
DIV LP004 1000
SET LP011 LP004
' LP4 is offset vector
'calculate location of lap MOV
SET LP007 LP003
SUB LP007 LP002
SET LB000 15
SET LP004 LP007
SET LP005 LP006
JUMP *PROJECT
*15
SUB LP007 LP004
ADD LP008 LP011
ADD LP008 LP007
ADD LP010 LP011
'calculation complete
' 
SMOVL LP010 V=LI000 PL=0  +MOVJ LEX001
TIMER T=0.20
WAIT IN#(LI007)=OFF T=3.00
JUMP *CHK_NG IF IN#(LI007)=ON
TIMER T=0.30
SMOVL LP008 V=LI001 SRCH RIN#(LI004)=ON T=0.10 DIS=LD001  +MOVJ LEX001
TIMER T=0.50
GETS LB002 $B002
JUMP *BADSRCH IF LB002=0
GETS LPX007 $PX002
CNVRT LPX007 LPX007 BF
' Calculate shift amount
SUB LP007 LP003
SET LB000 16
SET LP005 LP004
SET LP004 LP007
JUMP *PROJECT
*16
SUB LP007 LP004
' lap direction isolated
ADD LP009 LP007
JUMP *FINTOUCH
' 
'--------------------------------
'--------------------------------
'--------------------------------
'--- Functions
'--------------------------------
' 
'P4 is original vector i
'P5 is original vector j
'LD 5,6,7,8,9,10,11,12,13
'LP 4,5
'LR 5,6,7,8,9,10,11,12,13,14
*CROSPROD
GETE LD005 LP004 (1)
GETE LD006 LP004 (2)
GETE LD007 LP004 (3)
SET LR005 LD005
SET LR006 LD006
SET LR007 LD007
'd8 d9 d10 are j vector
GETE LD008 LP005 (1)
GETE LD009 LP005 (2)
GETE LD010 LP005 (3)
SET LR008 LD008
SET LR009 LD009
SET LR010 LD010
'X component LR11
SET LR013 LR006
SET LR014 LR007
MUL LR013 LR010
MUL LR014 LR009
SUB LR013 LR014
SET LR011 LR013
'Y component LR12
SET LR015 LR005
SET LR014 LR007
MUL LR015 LR010
MUL LR014 LR008
SUB LR014 LR015
SET LR012 LR014
'Z component LR13
MUL LR005 LR009
MUL LR006 LR008
SUB LR005 LR006
SET LD011 LR011
SET LD012 LR012
SET LD013 LR005
DIV LD011 1000
DIV LD012 1000
DIV LD013 1000
SETE LP004 (1) LD011
SETE LP004 (2) LD012
SETE LP004 (3) LD013
'LP4 is cross product vect k
JUMP LABEL: LB000
' 
'LP4 is original vector
'Calculates LD10 as Vector length
'- ver. 2.0: microns not mm
'LD 5,6,7,10
'LP 4
'LR 5,6,7,8,9
*UNITVECT
GETE LD005 LP004 (1)
GETE LD006 LP004 (2)
GETE LD007 LP004 (3)
SET LR005 LD005
SET LR006 LD006
SET LR007 LD007
SET LR008 LR005
SET LR009 LR006
MUL LR008 LR008
MUL LR009 LR009
ADD LR008 LR009
SQRT LR008 LR008
SET LR009 LR007
MUL LR008 LR008
MUL LR009 LR009
ADD LR008 LR009
SQRT LR008 LR008
'R8=vector length
SET LD010 LR008
JUMP *uvecZero IF LR008=0
DIV LR005 LR008
DIV LR006 LR008
DIV LR007 LR008
JUMP *uvecNot0
*uvecZero
SET LR005 0
SET LR006 0
SET LR007 0
*uvecNot0
MUL LR005 1000
MUL LR006 1000
MUL LR007 1000
SET LD005 LR005
SET LD006 LR006
SET LD007 LR007
SETE LP004 (1) LD005
SETE LP004 (2) LD006
SETE LP004 (3) LD007
SETE LP004 (4) 0
SETE LP004 (5) 0
SETE LP004 (6) 0
SETE LP004 (7) 0
JUMP LABEL: LB000
' 
*PROJECT
'LP4 is vector to project
'LP5 is vector to project on to
'LD 5,6,7,8,9,10
'LP 4,5
'LR 5,6,7,8,9,10,11
GETE LD005 LP004 (1)
GETE LD006 LP004 (2)
GETE LD007 LP004 (3)
GETE LD008 LP005 (1)
GETE LD009 LP005 (2)
GETE LD010 LP005 (3)
SET LR005 LD005
SET LR006 LD006
SET LR007 LD007
SET LR008 LD008
SET LR009 LD009
SET LR010 LD010
'Dot product
MUL LR005 LR008
MUL LR006 LR009
MUL LR007 LR010
SET LR011 LR005
ADD LR011 LR006
ADD LR011 LR007
SET LR005 LR008
SET LR006 LR009
SET LR007 LR010
MUL LR005 LR005
MUL LR006 LR006
MUL LR007 LR007
ADD LR005 LR006
ADD LR005 LR007
'LD5 is square of LP5
JUMP *projZero IF LR005=0
DIV LR011 LR005
JUMP *projNot0
*projZero
SET LR011 0
*projNot0
MUL LR008 LR011
MUL LR009 LR011
MUL LR010 LR011
SET LD008 LR008
SET LD009 LR009
SET LD010 LR010
SETE LP004 (1) LD008
SETE LP004 (2) LD009
SETE LP004 (3) LD010
'LP4 is projected vector
JUMP LABEL: LB000
' 
*CHK_NG
DOUT OT#(LI007) OFF
PULSE OT#(LI012) T=0.50
PAUSE
' 
*ngType
MSG "Set Mode between 1 - 2"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*ngTeach
MSG "Set TeachMode to 0, 1 or 2"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*ngAteach
MSG "Set autoTeach to 1 - 100mm"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*ngSpeed
MSG "Set SearchSpeed to 1 - 1000cm/mn"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*ngSpeed2
MSG "Set Air Speed to 1 - 3000cm/mn"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*ngDist
MSG "Set SearchDistance to 1 - 100mm"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*ngOutP
MSG "Set ShiftVariable between 0-127"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*ngLap
MSG "Set LapOffset between 0 - 20mm"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*ngRIN
MSG "Set RapidInput# between 1 - 5"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*ngRobot
MSG "Set Robot# between 1 - 4"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*ngLaser
MSG "Set Laser# between 1 - 5"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*ngSpdtyp
MSG "Set Speed Type between 1 - 4"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*ngPos
MSG "check register position"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*ngPlane
MSG "Set Plane# between 1 - 3"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*ngFrame
MSG "Set UserFrame# between 0 - 64"
PULSE OT#(LI010) T=0.50
PAUSE
RET
' 
*BADSRCH
DOUT OT#(LI007) OFF
MSG "No Surface Detected"
JUMP *CHCKMODE IF IN#(2023)=ON
PULSE OT#(LI011) T=0.50
PAUSE
*CHCKMODE
RET
' 
*FINTOUCH
JUMP *NOTEACH1 IF LB004=0
MSG "Modify RefPoint2; set teach=0"
TIMER T=8.00
PAUSE
RET
' 
*NOTEACH1
SET LP004 LP009
SET LB000 14
JUMP *UNITVECT
*14
MSG ""
SETE LP009 (4) 0
SETE LP009 (5) 0
SETE LP009 (6) 0
CONVSFT LP009 LP009 LPX000 MTF
SET P[LI002] LP009
*END
SMOVL LP001 V=LI000  +MOVJ LEX001
DOUT OT#(LI007) OFF
RET IF LI004<>LI013
DOUT OT#(LI014) OFF
DOUT OT#(21) OFF
TIMER T=0.20
'--------------------------------
'NEW LOGIC FOR THE OPTIONAL RETRY
'--------------------------------
IFTHEN LB014>=1
	 INC LB015
	 GETE LD016 LP009 (1)
	 GETE LD017 LP009 (2)
	 GETE LD018 LP009 (3)
	 SET LB017 0
	 SET LB018 0
	'--------------------------------
	'--------------------------------
	 IFTHEN LD016>=LD015 ANDIF LD016>=LD019 ANDIF LB015>=LB014
		 MSG "MAX RETRY COUNT HAVE BEEN REACH"
		 TIMER T=8.00
		 PAUSE
		 RET
	 ENDIF
	 IFTHEN LD017>=LD015 ANDIF LD017>=LD019 ANDIF LB015>=LB014
		 MSG "MAX RETRY COUNT HAVE BEEN REACH"
		 TIMER T=8.00
		 PAUSE
		 RET
	 ENDIF
	 IFTHEN LD018>=LD015 ANDIF LD018>=LD019 ANDIF LB015>=LB014
		 MSG "MAX RETRY COUNT HAVE BEEN REACH"
		 TIMER T=8.00
		 PAUSE
		 RET
	 ENDIF
	 IFTHEN LD016<=LD015 ANDIF LD016<=LD019 ANDIF LB015>=LB014
		 MSG "MAX RETRY COUNT HAVE BEEN REACH"
		 TIMER T=8.00
		 PAUSE
		 RET
	 ENDIF
	 IFTHEN LD017<=LD015 ANDIF LD017<=LD019 ANDIF LB015>=LB014
		 MSG "MAX RETRY COUNT HAVE BEEN REACH"
		 TIMER T=8.00
		 PAUSE
		 RET
	 ENDIF
	 IFTHEN LD018<=LD015 ANDIF LD018<=LD019 ANDIF LB015>=LB014
		 MSG "MAX RETRY COUNT HAVE BEEN REACH"
		 TIMER T=8.00
		 PAUSE
		 RET
	 ENDIF
	'--------------------------------
	'--------------------------------
	 JUMP *RETRY IF LD016>=LD015
	 JUMP *RETRY IF LD017>=LD015
	 JUMP *RETRY IF LD018>=LD015
	 JUMP *RETRY IF LD016<=LD019
	 JUMP *RETRY IF LD017<=LD019
	 JUMP *RETRY IF LD018<=LD019
ENDIF
RET
'----------------------
'----------------------
'- Please contact Jack
'- Moore of the TAT
'- to report bugs.
'----------------------
END
